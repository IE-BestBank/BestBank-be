name: Deploy backend to Azure Web App
#poepj
on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
    IMAGE_NAME: bestbank-be
    DOCKER_REGISTRY_SERVER_URL_DEV: bestbankcontregistrydev.azurecr.io
    DOCKER_REGISTRY_SERVER_URL_UAT: bestbankcontregistryuat.azurecr.io
    DOCKER_REGISTRY_SERVER_URL_PROD: bestbankcontregistryprod.azurecr.io
    KEY_VAULT_NAME_DEV: BestBank-KV-dev
    KEY_VAULT_NAME_UAT: BestBank-KV-uat
    KEY_VAULT_NAME_PROD: BestBank-KV-prod

    BACKEND_WEBAPP_DEV: bestbank-be-dev
    BACKEND_WEBAPP_UAT: bestbank-be-uat
    BACKEND_WEBAPP_PROD: bestbank-be-prod

    KEY_VAULT_SECRET_NAME_ACR_USERNAME: adminUsernameSecretName
    KEY_VAULT_SECRET_NAME_ACR_PASSWORD: adminPasswordSecretName0


jobs:
  pytests:
    runs-on: ubuntu-latest
    env:
      ENV: ghci
      APPLICATIONINSIGHTS_CONNECTION_STRING: "InstrumentationKey=00000000-0000-0000-0000-000000000000"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8 pytest
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: python -m pytest --cov=iebank_api -v


  postman-tests:
    runs-on: ubuntu-latest
    needs: pytests
    env:
      ENVIROMENT: Dev  # Default environment
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "16"

    - name: Install Newman
      run: npm install -g newman

    - name: Run Postman Tests
      run: |
          newman run ./postman/bestbank-collection.json -e ./postman/dev-environment.json
          newman run ./postman/bestbank-collection.json -e ./postman/uat-environment.json
          newman run ./postman/bestbank-collection.json -e ./postman/prod-environment.json

  # build the docker image
  build-dev:
    runs-on: ubuntu-latest
    needs: pytests
    outputs:
      image-version: ${{ steps.image-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: "Log in to Azure"
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Get Docker registry credentials for Dev"
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "REGISTRY_USERNAME=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_USERNAME }} --vault-name ${{ env.KEY_VAULT_NAME_DEV }} --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_PASSWORD }} --vault-name ${{ env.KEY_VAULT_NAME_DEV }} --query value -o tsv)" >> $GITHUB_ENV

      - name: Login to Docker Registry for Dev
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set image version
        id: image-version
        run: echo "version=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_OUTPUT

      - name: Docker Build and Push for Dev
        run: |
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy to Azure Web App - Dev
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.BACKEND_WEBAPP_DEV }}
          images: ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}

  build-uat:
    if:  (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [pytests, build-dev]
    outputs:
      image-version: ${{ steps.image-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: "Log in to Azure"
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Get Docker registry credentials for UAT"
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "REGISTRY_USERNAME=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_USERNAME }} --vault-name ${{ env.KEY_VAULT_NAME_UAT }} --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD=$(az keyvault secret show --name ${{ env.KEY_VAULT_SECRET_NAME_ACR_PASSWORD }} --vault-name ${{ env.KEY_VAULT_NAME_UAT }} --query value -o tsv)" >> $GITHUB_ENV

      - name: Login to Docker Registry for UAT
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set image version
        id: image-version
        run: echo "version=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_OUTPUT

      - name: Docker Build and Push for UAT
        run: |
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy to Azure Web App - UAT
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.BACKEND_WEBAPP_UAT }}
          images: ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}


  build-prod:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [pytests, build-dev, build-uat, postman-tests]
    outputs:
      image-version: ${{ steps.image-version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: "Log in to Azure"
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: "Get docker registry credentials"
      uses: Azure/cli@v2.1.0
      with:
        inlineScript: |
            echo "REGISTRY_USERNAME=$(az keyvault secret show --name adminUsernameSecretName --vault-name ${{ env.KEY_VAULT_NAME_PROD }} --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD=$(az keyvault secret show --name adminPasswordSecretName0 --vault-name ${{ env.KEY_VAULT_NAME_PROD }} --query value -o tsv)" >> $GITHUB_ENV

    - name: List files in the workspace (Production)
      run: ls -R

    - name: "Login to Docker Registry"
      uses: azure/docker-login@v2
      with:
        login-server: ${{ env.DOCKER_REGISTRY_SERVER_URL_PROD }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}

    - name: Set image version
      id: image-version
      run: |
            echo "version=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_OUTPUT

    - name: Docker Build and Push
      run: |
        docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_PROD }}/${{ env.IMAGE_NAME }}:latest
        docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL_PROD }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}
        docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_PROD }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.DOCKER_REGISTRY_SERVER_URL_PROD }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}

    - name: Deploy to Azure Web App - Production
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.BACKEND_WEBAPP_PROD }}
        images: "${{ env.DOCKER_REGISTRY_SERVER_URL_PROD }}/${{ env.IMAGE_NAME }}:${{ steps.image-version.outputs.version }}"


  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-dev
    environment:
      name: 'Development'

    steps:
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App - Dev
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.BACKEND_WEBAPP_DEV }}
          images: ${{ env.DOCKER_REGISTRY_SERVER_URL_DEV }}/${{ env.IMAGE_NAME }}:latest

  deploy-uat:
    runs-on: ubuntu-latest
    needs: build-uat
    environment:
      name: 'UAT'

    steps:
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App - UAT
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.BACKEND_WEBAPP_UAT }}
          images: ${{ env.DOCKER_REGISTRY_SERVER_URL_UAT }}/${{ env.IMAGE_NAME }}:latest

  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-prod

    steps:
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App - Prod
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.BACKEND_WEBAPP_PROD }}
          images: ${{ env.DOCKER_REGISTRY_SERVER_URL_PROD }}/${{ env.IMAGE_NAME }}:latest
